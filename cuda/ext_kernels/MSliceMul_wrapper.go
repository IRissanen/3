package ext_kernels

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import(
	"unsafe"
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
)

// CUDA handle for MSliceMul kernel
var MSliceMul_code cu.Function

// Stores the arguments for MSliceMul kernel invocation
type MSliceMul_args_t struct{
	 arg_dst unsafe.Pointer
	 arg_src unsafe.Pointer
	 arg_MSliceSrc unsafe.Pointer
	 arg_MSliceMultiplier float32
	 arg_Nx int
	 arg_Ny int
	 arg_Nz int
	 argptr [7]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for MSliceMul kernel invocation
var MSliceMul_args MSliceMul_args_t

func init(){
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	 MSliceMul_args.argptr[0] = unsafe.Pointer(&MSliceMul_args.arg_dst)
	 MSliceMul_args.argptr[1] = unsafe.Pointer(&MSliceMul_args.arg_src)
	 MSliceMul_args.argptr[2] = unsafe.Pointer(&MSliceMul_args.arg_MSliceSrc)
	 MSliceMul_args.argptr[3] = unsafe.Pointer(&MSliceMul_args.arg_MSliceMultiplier)
	 MSliceMul_args.argptr[4] = unsafe.Pointer(&MSliceMul_args.arg_Nx)
	 MSliceMul_args.argptr[5] = unsafe.Pointer(&MSliceMul_args.arg_Ny)
	 MSliceMul_args.argptr[6] = unsafe.Pointer(&MSliceMul_args.arg_Nz)
	 }

// Wrapper for MSliceMul CUDA kernel, asynchronous.
func K_ext_MSliceMul_async ( dst unsafe.Pointer, src unsafe.Pointer, MSliceSrc unsafe.Pointer, MSliceMultiplier float32, Nx int, Ny int, Nz int,  cfg *config) {
	if Synchronous{ // debug
		Sync()
		timer.Start("MSliceMul")
	}

	MSliceMul_args.Lock()
	defer MSliceMul_args.Unlock()

	if MSliceMul_code == 0{
		MSliceMul_code = fatbinLoad(MSliceMul_map, "MSliceMul")
	}

	 MSliceMul_args.arg_dst = dst
	 MSliceMul_args.arg_src = src
	 MSliceMul_args.arg_MSliceSrc = MSliceSrc
	 MSliceMul_args.arg_MSliceMultiplier = MSliceMultiplier
	 MSliceMul_args.arg_Nx = Nx
	 MSliceMul_args.arg_Ny = Ny
	 MSliceMul_args.arg_Nz = Nz
	

	args := MSliceMul_args.argptr[:]
	cu.LaunchKernel(MSliceMul_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous{ // debug
		Sync()
		timer.Stop("MSliceMul")
	}
}

// maps compute capability on PTX code for MSliceMul kernel.
var MSliceMul_map = map[int]string{ 0: "" ,
20: MSliceMul_ptx_20 ,
30: MSliceMul_ptx_30 ,
35: MSliceMul_ptx_35 ,
50: MSliceMul_ptx_50 ,
52: MSliceMul_ptx_52 ,
53: MSliceMul_ptx_53  }

// MSliceMul PTX code for various compute capabilities.
const(
  MSliceMul_ptx_20 = `
.version 5.0
.target sm_20
.address_size 64

	// .globl	MSliceMul

.visible .entry MSliceMul(
	.param .u64 MSliceMul_param_0,
	.param .u64 MSliceMul_param_1,
	.param .u64 MSliceMul_param_2,
	.param .f32 MSliceMul_param_3,
	.param .u32 MSliceMul_param_4,
	.param .u32 MSliceMul_param_5,
	.param .u32 MSliceMul_param_6
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd1, [MSliceMul_param_0];
	ld.param.u64 	%rd2, [MSliceMul_param_1];
	ld.param.u64 	%rd3, [MSliceMul_param_2];
	ld.param.f32 	%f7, [MSliceMul_param_3];
	ld.param.u32 	%r5, [MSliceMul_param_4];
	ld.param.u32 	%r6, [MSliceMul_param_5];
	ld.param.u32 	%r7, [MSliceMul_param_6];
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r1, %r8, %r9, %r10;
	mov.u32 	%r11, %ntid.y;
	mov.u32 	%r12, %ctaid.y;
	mov.u32 	%r13, %tid.y;
	mad.lo.s32 	%r2, %r11, %r12, %r13;
	mov.u32 	%r14, %ntid.z;
	mov.u32 	%r15, %ctaid.z;
	mov.u32 	%r16, %tid.z;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	setp.ge.s32	%p1, %r2, %r6;
	setp.ge.s32	%p2, %r1, %r5;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r7;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_4;

	mad.lo.s32 	%r17, %r3, %r6, %r2;
	mad.lo.s32 	%r4, %r17, %r5, %r1;
	setp.eq.s64	%p6, %rd3, 0;
	@%p6 bra 	BB0_3;

	cvta.to.global.u64 	%rd4, %rd3;
	mul.wide.s32 	%rd5, %r4, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f4, [%rd6];
	mul.f32 	%f7, %f4, %f7;

BB0_3:
	cvta.to.global.u64 	%rd7, %rd1;
	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.s32 	%rd9, %r4, 4;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.f32 	%f5, [%rd10];
	mul.f32 	%f6, %f7, %f5;
	add.s64 	%rd11, %rd7, %rd9;
	st.global.f32 	[%rd11], %f6;

BB0_4:
	ret;
}


`
   MSliceMul_ptx_30 = `
.version 5.0
.target sm_30
.address_size 64

	// .globl	MSliceMul

.visible .entry MSliceMul(
	.param .u64 MSliceMul_param_0,
	.param .u64 MSliceMul_param_1,
	.param .u64 MSliceMul_param_2,
	.param .f32 MSliceMul_param_3,
	.param .u32 MSliceMul_param_4,
	.param .u32 MSliceMul_param_5,
	.param .u32 MSliceMul_param_6
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd1, [MSliceMul_param_0];
	ld.param.u64 	%rd2, [MSliceMul_param_1];
	ld.param.u64 	%rd3, [MSliceMul_param_2];
	ld.param.f32 	%f7, [MSliceMul_param_3];
	ld.param.u32 	%r5, [MSliceMul_param_4];
	ld.param.u32 	%r6, [MSliceMul_param_5];
	ld.param.u32 	%r7, [MSliceMul_param_6];
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r1, %r8, %r9, %r10;
	mov.u32 	%r11, %ntid.y;
	mov.u32 	%r12, %ctaid.y;
	mov.u32 	%r13, %tid.y;
	mad.lo.s32 	%r2, %r11, %r12, %r13;
	mov.u32 	%r14, %ntid.z;
	mov.u32 	%r15, %ctaid.z;
	mov.u32 	%r16, %tid.z;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	setp.ge.s32	%p1, %r2, %r6;
	setp.ge.s32	%p2, %r1, %r5;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r7;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_4;

	mad.lo.s32 	%r17, %r3, %r6, %r2;
	mad.lo.s32 	%r4, %r17, %r5, %r1;
	setp.eq.s64	%p6, %rd3, 0;
	@%p6 bra 	BB0_3;

	cvta.to.global.u64 	%rd4, %rd3;
	mul.wide.s32 	%rd5, %r4, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f4, [%rd6];
	mul.f32 	%f7, %f4, %f7;

BB0_3:
	cvta.to.global.u64 	%rd7, %rd1;
	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.s32 	%rd9, %r4, 4;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.f32 	%f5, [%rd10];
	mul.f32 	%f6, %f7, %f5;
	add.s64 	%rd11, %rd7, %rd9;
	st.global.f32 	[%rd11], %f6;

BB0_4:
	ret;
}


`
   MSliceMul_ptx_35 = `
.version 5.0
.target sm_35
.address_size 64

	// .globl	MSliceMul

.visible .entry MSliceMul(
	.param .u64 MSliceMul_param_0,
	.param .u64 MSliceMul_param_1,
	.param .u64 MSliceMul_param_2,
	.param .f32 MSliceMul_param_3,
	.param .u32 MSliceMul_param_4,
	.param .u32 MSliceMul_param_5,
	.param .u32 MSliceMul_param_6
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd1, [MSliceMul_param_0];
	ld.param.u64 	%rd2, [MSliceMul_param_1];
	ld.param.u64 	%rd3, [MSliceMul_param_2];
	ld.param.f32 	%f7, [MSliceMul_param_3];
	ld.param.u32 	%r5, [MSliceMul_param_4];
	ld.param.u32 	%r6, [MSliceMul_param_5];
	ld.param.u32 	%r7, [MSliceMul_param_6];
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r1, %r8, %r9, %r10;
	mov.u32 	%r11, %ntid.y;
	mov.u32 	%r12, %ctaid.y;
	mov.u32 	%r13, %tid.y;
	mad.lo.s32 	%r2, %r11, %r12, %r13;
	mov.u32 	%r14, %ntid.z;
	mov.u32 	%r15, %ctaid.z;
	mov.u32 	%r16, %tid.z;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	setp.ge.s32	%p1, %r2, %r6;
	setp.ge.s32	%p2, %r1, %r5;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r7;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_4;

	mad.lo.s32 	%r17, %r3, %r6, %r2;
	mad.lo.s32 	%r4, %r17, %r5, %r1;
	setp.eq.s64	%p6, %rd3, 0;
	@%p6 bra 	BB0_3;

	cvta.to.global.u64 	%rd4, %rd3;
	mul.wide.s32 	%rd5, %r4, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f4, [%rd6];
	mul.f32 	%f7, %f4, %f7;

BB0_3:
	cvta.to.global.u64 	%rd7, %rd1;
	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.s32 	%rd9, %r4, 4;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.nc.f32 	%f5, [%rd10];
	mul.f32 	%f6, %f7, %f5;
	add.s64 	%rd11, %rd7, %rd9;
	st.global.f32 	[%rd11], %f6;

BB0_4:
	ret;
}


`
   MSliceMul_ptx_50 = `
.version 5.0
.target sm_50
.address_size 64

	// .globl	MSliceMul

.visible .entry MSliceMul(
	.param .u64 MSliceMul_param_0,
	.param .u64 MSliceMul_param_1,
	.param .u64 MSliceMul_param_2,
	.param .f32 MSliceMul_param_3,
	.param .u32 MSliceMul_param_4,
	.param .u32 MSliceMul_param_5,
	.param .u32 MSliceMul_param_6
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd1, [MSliceMul_param_0];
	ld.param.u64 	%rd2, [MSliceMul_param_1];
	ld.param.u64 	%rd3, [MSliceMul_param_2];
	ld.param.f32 	%f7, [MSliceMul_param_3];
	ld.param.u32 	%r5, [MSliceMul_param_4];
	ld.param.u32 	%r6, [MSliceMul_param_5];
	ld.param.u32 	%r7, [MSliceMul_param_6];
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r1, %r8, %r9, %r10;
	mov.u32 	%r11, %ntid.y;
	mov.u32 	%r12, %ctaid.y;
	mov.u32 	%r13, %tid.y;
	mad.lo.s32 	%r2, %r11, %r12, %r13;
	mov.u32 	%r14, %ntid.z;
	mov.u32 	%r15, %ctaid.z;
	mov.u32 	%r16, %tid.z;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	setp.ge.s32	%p1, %r2, %r6;
	setp.ge.s32	%p2, %r1, %r5;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r7;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_4;

	mad.lo.s32 	%r17, %r3, %r6, %r2;
	mad.lo.s32 	%r4, %r17, %r5, %r1;
	setp.eq.s64	%p6, %rd3, 0;
	@%p6 bra 	BB0_3;

	cvta.to.global.u64 	%rd4, %rd3;
	mul.wide.s32 	%rd5, %r4, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f4, [%rd6];
	mul.f32 	%f7, %f4, %f7;

BB0_3:
	cvta.to.global.u64 	%rd7, %rd1;
	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.s32 	%rd9, %r4, 4;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.nc.f32 	%f5, [%rd10];
	mul.f32 	%f6, %f7, %f5;
	add.s64 	%rd11, %rd7, %rd9;
	st.global.f32 	[%rd11], %f6;

BB0_4:
	ret;
}


`
   MSliceMul_ptx_52 = `
.version 5.0
.target sm_52
.address_size 64

	// .globl	MSliceMul

.visible .entry MSliceMul(
	.param .u64 MSliceMul_param_0,
	.param .u64 MSliceMul_param_1,
	.param .u64 MSliceMul_param_2,
	.param .f32 MSliceMul_param_3,
	.param .u32 MSliceMul_param_4,
	.param .u32 MSliceMul_param_5,
	.param .u32 MSliceMul_param_6
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd1, [MSliceMul_param_0];
	ld.param.u64 	%rd2, [MSliceMul_param_1];
	ld.param.u64 	%rd3, [MSliceMul_param_2];
	ld.param.f32 	%f7, [MSliceMul_param_3];
	ld.param.u32 	%r5, [MSliceMul_param_4];
	ld.param.u32 	%r6, [MSliceMul_param_5];
	ld.param.u32 	%r7, [MSliceMul_param_6];
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r1, %r8, %r9, %r10;
	mov.u32 	%r11, %ntid.y;
	mov.u32 	%r12, %ctaid.y;
	mov.u32 	%r13, %tid.y;
	mad.lo.s32 	%r2, %r11, %r12, %r13;
	mov.u32 	%r14, %ntid.z;
	mov.u32 	%r15, %ctaid.z;
	mov.u32 	%r16, %tid.z;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	setp.ge.s32	%p1, %r2, %r6;
	setp.ge.s32	%p2, %r1, %r5;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r7;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_4;

	mad.lo.s32 	%r17, %r3, %r6, %r2;
	mad.lo.s32 	%r4, %r17, %r5, %r1;
	setp.eq.s64	%p6, %rd3, 0;
	@%p6 bra 	BB0_3;

	cvta.to.global.u64 	%rd4, %rd3;
	mul.wide.s32 	%rd5, %r4, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f4, [%rd6];
	mul.f32 	%f7, %f4, %f7;

BB0_3:
	cvta.to.global.u64 	%rd7, %rd1;
	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.s32 	%rd9, %r4, 4;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.nc.f32 	%f5, [%rd10];
	mul.f32 	%f6, %f7, %f5;
	add.s64 	%rd11, %rd7, %rd9;
	st.global.f32 	[%rd11], %f6;

BB0_4:
	ret;
}


`
   MSliceMul_ptx_53 = `
.version 5.0
.target sm_53
.address_size 64

	// .globl	MSliceMul

.visible .entry MSliceMul(
	.param .u64 MSliceMul_param_0,
	.param .u64 MSliceMul_param_1,
	.param .u64 MSliceMul_param_2,
	.param .f32 MSliceMul_param_3,
	.param .u32 MSliceMul_param_4,
	.param .u32 MSliceMul_param_5,
	.param .u32 MSliceMul_param_6
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd1, [MSliceMul_param_0];
	ld.param.u64 	%rd2, [MSliceMul_param_1];
	ld.param.u64 	%rd3, [MSliceMul_param_2];
	ld.param.f32 	%f7, [MSliceMul_param_3];
	ld.param.u32 	%r5, [MSliceMul_param_4];
	ld.param.u32 	%r6, [MSliceMul_param_5];
	ld.param.u32 	%r7, [MSliceMul_param_6];
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r1, %r8, %r9, %r10;
	mov.u32 	%r11, %ntid.y;
	mov.u32 	%r12, %ctaid.y;
	mov.u32 	%r13, %tid.y;
	mad.lo.s32 	%r2, %r11, %r12, %r13;
	mov.u32 	%r14, %ntid.z;
	mov.u32 	%r15, %ctaid.z;
	mov.u32 	%r16, %tid.z;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	setp.ge.s32	%p1, %r2, %r6;
	setp.ge.s32	%p2, %r1, %r5;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r7;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_4;

	mad.lo.s32 	%r17, %r3, %r6, %r2;
	mad.lo.s32 	%r4, %r17, %r5, %r1;
	setp.eq.s64	%p6, %rd3, 0;
	@%p6 bra 	BB0_3;

	cvta.to.global.u64 	%rd4, %rd3;
	mul.wide.s32 	%rd5, %r4, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f4, [%rd6];
	mul.f32 	%f7, %f4, %f7;

BB0_3:
	cvta.to.global.u64 	%rd7, %rd1;
	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.s32 	%rd9, %r4, 4;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.nc.f32 	%f5, [%rd10];
	mul.f32 	%f6, %f7, %f5;
	add.s64 	%rd11, %rd7, %rd9;
	st.global.f32 	[%rd11], %f6;

BB0_4:
	ret;
}


`
 )
